import java.nio.file.Paths

plugins {
    id "org.flywaydb.flyway"
    id "org.springframework.boot"
    id "io.spring.dependency-management"
    id "io.freefair.lombok"
    id "java"
    id "jacoco"
}

java {
    sourceCompatibility = libs.versions.java.get()
    targetCompatibility = libs.versions.java.get()
}

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom "org.testcontainers:testcontainers-bom:${libs.versions.testcontainers.get()}"
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    implementation {
        exclude module: "spring-boot-starter-tomcat"
    }
    testImplementation {
        exclude module: "junit-vintage-engine"
    }
}

dependencies {
    annotationProcessor "org.mapstruct:mapstruct-processor:${libs.versions.mapstruct.get()}"
    annotationProcessor "org.springframework:spring-context-indexer"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    compileOnly "org.mapstruct:mapstruct:${libs.versions.mapstruct.get()}"

    runtimeOnly "org.postgresql:postgresql"

    developmentOnly "org.springframework.boot:spring-boot-devtools"

    implementation "org.apache.commons:commons-lang3:${libs.versions.apacheCommonsLang.get()}"
    implementation "org.apache.commons:commons-collections4:${libs.versions.apacheCommonsCollections.get()}"
    implementation "org.flywaydb:flyway-core"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-aop"
    implementation "org.springframework.boot:spring-boot-starter-data-jdbc"
    implementation "org.springframework.boot:spring-boot-starter-oauth2-client"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.boot:spring-boot-starter-undertow"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-starter-web"

    testImplementation "com.tngtech.archunit:archunit-junit5:${libs.versions.archunit.get()}"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "org.testcontainers:junit-jupiter"
    testImplementation "org.testcontainers:postgresql"
}

task copyLatestClientBuild(type: Copy) {
    def clientPrjDir = project(":app-client").projectDir.toString()
    def serverBldDir = project(":app-server").buildDir.toString()

    from(Paths.get(clientPrjDir, "dist"))
    into(Paths.get(serverBldDir, "resources", "main", "static"))
}

flyway {
    url = env.get("JDBC_DATABASE_URL")
    user = env.get("JDBC_DATABASE_USERNAME")
    password = env.get("JDBC_DATABASE_PASSWORD")

    driver = "org.postgresql.Driver"
    encoding = "UTF-8"
    locations = ["classpath:db/migration"]
    baselineVersion = "0.0"
    baselineOnMigrate = true
}

processResources {
    dependsOn copyLatestClientBuild
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

check {
    dependsOn jacocoTestReport, jacocoTestCoverageVerification
}

def jacocoExclusions = [
    "dev/arhor/simple/todo/ToDoAppRunner.class",
    "**/config/*",
]

jacocoTestReport {
    dependsOn test

    reports {
        xml.required.set(false)
        csv.required.set(false)
        html.required.set(true)
    }

    classDirectories.setFrom files(classDirectories.files.collect {
        fileTree(dir: it, exclude: jacocoExclusions)
    })
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.10
            }
        }
    }

    classDirectories.setFrom files(classDirectories.files.collect {
        fileTree(dir: it, exclude: jacocoExclusions)
    })
}

tasks.withType(JavaCompile) {
    options.compilerArgs.addAll([
        "-Xlint:unchecked",
        "-Xlint:deprecation",
        '-Xlint:preview',
        "--enable-preview",
    ])
}
