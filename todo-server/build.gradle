import java.nio.file.Paths

plugins {
    id 'org.flywaydb.flyway'
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'java'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    implementation {
        exclude module: 'spring-boot-starter-tomcat'
    }
    testImplementation {
        exclude module: 'junit-vintage-engine'
    }
}

dependencies {
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    annotationProcessor 'org.springframework:spring-context-indexer'

    compileOnly 'org.projectlombok:lombok'
    compileOnly "org.mapstruct:mapstruct:${mapstructVersion}"

    runtimeOnly 'org.postgresql:postgresql'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    implementation 'org.flywaydb:flyway-core'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-undertow'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
}


task copyLatestClientBuild(type: Copy) {
    def clientPrjDir = project(':todo-client').projectDir.toString()
    def serverBldDir = project(':todo-server').buildDir.toString()

    from(Paths.get(clientPrjDir, 'dist'))
    into(Paths.get(serverBldDir, 'resources', 'main', 'static'))
}

flyway {
    url = environmentVariable('JDBC_DATABASE_URL')
    user = environmentVariable('JDBC_DATABASE_USERNAME')
    password = environmentVariable('JDBC_DATABASE_PASSWORD')

    driver = 'org.postgresql.Driver'
    encoding = 'UTF-8'
    locations = ['classpath:db/migration']
    baselineVersion = '0.0'
    baselineOnMigrate = true
}

processResources {
    dependsOn copyLatestClientBuild
}

tasks.withType(Test) {
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.compilerArgs.addAll([
            '-Xlint:unchecked',
            '-Xlint:deprecation',
    ])
}
